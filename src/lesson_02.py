"""
1. Простые типы данных и их коллекции

Строгая динамическая типизация Python

- Функция type(object)
  Возвращает класс объекта, его тип

- Функция id(object)

  Возвращает адрес объекта в оперативной памяти

- Функция isinstance(object, classinfo)

  Принимает на вход объект и класс и возвращает истину, если
  объект является экземпляром прямого или косвенного подкласса

- Оператор is

  Сравнивает пару объектов на идентичность
"""
# a = 5
# print(type(a), id(a))
# a = "hello world"
# print(type(a), id(a))
# a = 42.0 * 3.141592 / 2.71828
# print(type(a), id(a))
#
# data = 42
# print(isinstance(data, int))
#
# data = True
# print(isinstance(data, int))
#
# data = 3.14
# print(isinstance(data, (int, float, complex)))
#
# num = 2 + 2 * 2
# digit = 36 / 6
# print(num, digit)
# print(num == digit)
# print(num is digit)

"""
Изменяемые и неизменяемые типы

Основные математические операторы представлены в таблице.

-----------------------------------------------------------------------------
Неизменяемые                           |   Изменяемые
-----------------------------------------------------------------------------
None                                   |
-----------------------------------------------------------------------------
Числа: int, bool, float, complex       |
-----------------------------------------------------------------------------
Последовательности: str, tuple, bytes  | Последовательности: list, bytearray
-----------------------------------------------------------------------------
Множества: set                         | Множества: frozenset
-----------------------------------------------------------------------------
                                       | Отображения: dict
-----------------------------------------------------------------------------                                       
"""

# 18:20

# a = 5
# print(a, type(a), id(a))
# a += 1
# print(a, type(a), id(a))


# txt = "Hello world!"
# txt[5] = '_'

# txt = "Hello world!"
# print(txt, type(txt), id(txt))
# txt = txt.replace(' ', '_')
# print(txt, type(txt), id(txt))
#
# a = c = 2
# b = 3
# print(a, id(a), b, id(b), c, id(c))
# a = b + c
# print(a, id(a), b, id(b), c, id(c))
#
# x = 42
# y = 'text'
# z = 3.1415
#
# print(hash(x), hash(y), hash(z))
# my_list = [x, y, z]
# # print(hash(my_list))  # получим ошибку, т.к. list - изменяемый объект

"""
Аннотация типов

Мы можем указать тот или иной тип переменной, для того, 
чтобы проверить программиста
"""
# a: int = 42
# b: float = float(input('Введи число: '))
# a = a / b

# a: float = 42
# b: float = float(input('Введи число: '))
# a = a / b

# # Начиная с version 3.10
# a: int | float = 42
# b: float = float(input('Введи число: '))
# a = a / b


# Модуль typing

"""
Атрибуты и методы

Атрибуты и методы есть практически у всех объектов в Python

Атрибуты - это переменные, конкретные характеристика объекта,
такие как цвет поля или имя пользователя.

Методы - это функции, которые описаны внутри объекта или класса.
Они относятся к определённому объекту и позволяют взаимодействовать
с ними или другими частями кода. 
"""

# print("Hello world!".__doc__)
# print(str.__doc__)
#
# print("Hello world!".upper())
# print("Hello world!".count('l'))

"""
Функции для получения информации об атрибутах и методах

Функция dir(object)

Попытается вернуть список допустимых атрибутов для объекта.
Если объект не передавать-список имён в текущей локальной области

Функция help(object)

Если объект не указан, запускается интерактивная справочная система.

Если аргумент является строкой, то эта строка ищется как имя модуля,
функции, класса, метода, ключевого слова или раздела документации
и далее выводится страница справки.

Если аргументом является объект любого другого типа, создаётся страница
справки по этому объекту.
"""

# # 45:30
#
# # print(dir("Hello world!"))
#
# help("Hello world")
#
# # help(str)
#
# help()

"""
Целы числа

int(x, base=10) - возвращает целочисленный объект, созданный из числа
или строки х, или возвращает значение 0, если аргументы не заданы.
base - основание системы счисления, от 2 до 36

bin(x) - преобразует целое число в двоичную строку с префиксом "0b".

oct(x) - преобразует целое число в восьмеричную строку с префиксом "0o".

hex(x) - преобразует целое число в  шестнадцатеричную строку с префиксом "0x".
"""

x = int("42")
y = int(3.1415)
z = int("hello", base=30)  # Буквы не могут забегать за границу
# системы счисления
print(x, y, z, sep='\n')
"""
42
3
14167554
"""


