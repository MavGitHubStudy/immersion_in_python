# ****************************************************************************
# Переменные и требования к ним
# ****************************************************************************
# В Python всё объект. Числа, строки, массивы и даже функции и классы являются
# объектом. Переменная в Python является указателем на объект.
#
# Переменная "a" хранит значение "5". Верно. Также верно, что Python создал объект
# целого типа 5 (о типах данных мы поговорим на следующих лекциях). Далее была
# создана переменная "a" которая является указателем на объект целого типа число
# пять.
#
# Python является языком со строгой динамической типизацией. Это означает что тип
# объекта изменить невозможно он строго задаётся при создании объекта. При этом
# переменные могут ссылаться на объекты разных типов. И это не вызывает ошибки.
#
a = 5
print(a)
a = "hello world"
print(a)
a = 42.0 * 3.141592 / 2.71828
print(a)
#
# PEP-8! Обратите внимание на отступы в один пробел вокруг математических знаков
# "=", "*" и др. Это требование по оформлению кода, которое повышает его читаемость.
#
# Важно! Использование одной и той же переменной для разных типов данных является
# плохим стилем.
#
# Предварительная инициализация переменных в языке не нужна. Вы можете
# использовать переменную в том месте где оно понадобилось. Даже если уже написали
# несколько сотен строк кода.
#
#
# ****************************************************************************
# Константы
# ****************************************************************************
# Дополнительных команд для создания констант в языке Python нет. Есть лишь
# договорённость, что константа - это переменная написанное прописными буквами.
# Примеры констант.
#
MAX_COUNT = 1000
ZERO = 0
DATA_AFTER_DELETE = 'No data'
DAY = 60 * 60 * 24
#
# Константа в программировании — способ адресации данных, изменение которых
# программой не предполагается или запрещается. Python не вызовет исключение, если
# вы измените константу внутри кода. Но подобные действия со стороны программиста
# являются неверными.
#
# Отдельно хочу выделить три встроенные в язык Python константы. Это истина True,
# ложь False и ничего None. Первая буква строчная остальные прописные. Истину или
# ложь мы получаем в результате логических операций. О них мы поговорим чуть позже
# Значение None означает "ничего". Его можно использовать для создания переменной,
# значение которой изначально мы не знаем. Также None возвращают некоторые
# функции, результат работы которых не подразумевает возврат значения.
#
# ****************************************************************************
# Функция id()
# ****************************************************************************
# Вернёмся к тому что в Python всё объект, а переменная является ссылкой на объект.
# Воспользуемся встроенной функцией id(), которая возвращает адрес объекта в
# оперативной памяти вашего компьютера.
#
a = 5
print(id(a), a)
a = "hello world"
print(id(a), a)
a = 42.0 * 3.141592 / 2.71828
print(id(a), a)
#
# В отличие от режима интерпретатора, запуск программных файлов не выводит
# значения на экран. Поэтому мы используем функцию print(), внутри которой передаём
# вызов функции id(a). Как вы видите одна и та же переменная возвращает три разных
# адреса для трёх разных объектов в памяти Python.
#
#
# ****************************************************************************
# Зарезервированные слова, keyword.kwlist
# ****************************************************************************
# Существует чуть менее 40 зарезервированных слов, которые образуют базовый
# синтаксис языка Python. Ниже представлены они все.
#
# False, None, True, and, as, assert, async, await, break, class,
# continue, def, del, elif, else, except, finally, for, from, global, if,
# import, in, is, lambda, nonlocal, not, or, pass, raise, return, try,
# while, with, yield.
#
# А также case и match начиная с версии Python 3.10.
#
# Важно! Запрещено использовать в качестве имён переменных зарезервированные
# слова. Python завершить код с ошибкой.
#
#
# ****************************************************************************
# Ввод вывод данных
# ****************************************************************************
#
# Вывод, функция print()
#
# print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)

# Функция print() принимает один или несколько объектов разделённых запятыми и
# выводят их на печать По умолчанию это вывод в консоль, т.е. стандартный поток
# вывода.
print(42)
print(1, 2, 3, 4)
print('Hello', ',', 'world', '!')
#
# Отдельно уточню про два ключевых аргумента sep и end.
# sep по умолчанию хранит один пробел. Именно этим символом разделяются все
# объекты, перечисленные через запятую.
# end по умолчанию хранит символ перехода на новую строку '\n'. Это то, что функция
# print добавляет после вывода всех объектов.
#
print(42, sep='___', end='\n(=^.^=)\n')
print(1, 2, 3, 4, sep='___', end='\n(=^.^=)\n')
print('Hello', ',', 'world', '!', sep='___', end='\n(=^.^=)\n')
#
# Обратите внимание, что текст, заключённый в одинарные или двойные кавычки,
# выводится без изменения. Python воспринимает его как строковую информацию. Для
# вывода содержимого переменных мы указываем имя переменной без кавычек.
#
number = 42
print(number, sep='___', end='\n(=^.^=)\n')
ONE = 1
TWO = 2
print(ONE, TWO, 3, 4, sep='> <', end='>')
#
# Ввод, функция input()
# Для ввода данных и сохранение их в переменной используется функция input().
#
# result = input([prompt])
print()
name = input('Ваше имя: ')
age = float(input('Ваш возраст: '))
# how_old = age - 18
# Антипаттерн "магические числа"
ADULT = 18
how_old = age - ADULT
print(how_old, "лет назад вы стали совершеннолетним(ней)")
#
# ****************************************************************************
# Ветвление
# ****************************************************************************
# Если, if
#
pwd = 'text'
res = input('Input password: ')
if res == pwd:
    print('Доступ разрешён')
# ----------------------------------------------------------------------------
# В Python доступны все 6 операций сравнения:
# «==» — равно
# «!=» — не равно
# «>» — больше
# «<=» — меньше или равно
# «<» — меньше
# «>=» — больше или равно
# ----------------------------------------------------------------------------
#
# Иначе, else
# Для выполнения кода в случае ложности логического выражения используется
# зарезервированное слово else c обязательным двоеточием после него.
#
pwd = 'text'
res = input('Input password: ')
if res == pwd:
    print('Доступ разрешён')
    print('Но будьте осторожны')
else:
    print('Доступ запрещён')
    print('Работа завершена')
#
# Слово else относится к тому if, с которым находится на одном уровне. В примере ниже
# верхний if связан с нижним else, а средний if со средним else.
#
pwd = 'text'
res = input('Input password: ')
if res == pwd:
    print('Доступ разрешён')
    my_math = int(input('2 + 2 = '))
    if 2 + 2 == my_math:
        print('Вы в нормальном мире')
    else:
        print('Но будьте осторожны')
else:
    print('Доступ запрещён')
    print('Работа завершена')
#
# Еще если, elif
#
# Для проверки нескольких выражений используется elfi - сокращение от else if.
color = input('Твой любимый цвет: ')
if color == 'красный':
    print('Любитель яркого')
elif color == 'зелёный':
    print('Ты не охотник?')
elif color == 'синий':
    print('Ха, классика!')
else:
    print('Тебя не понять')
# Проверка работает до первого совпадения. После него дальнейший код пропускается.
# А если совпадений нет, срабатывает код после else.
#
# ****************************************************************************
# Выбор из вариантов, match и case
# ****************************************************************************
#
# В Python версии 3.10, т.е. совсем недавно появилась новая возможность
# множественного сравнения. Это конструкция match и case. После match указываем
# переменную для сравнения. Далее идёт блок из множества case с вариантами
# сравнения. Рассмотрим работу кода на примере.
#
# Важно! Если у вас стоит Python версии 3.9 и ниже, код не будет работать.
#
color = input('Твой любимый цвет: ')
match color:
    case 'красный' | 'оранжевый':
        print('Любитель яркого')
    case 'зелёный':
        print('Ты не охотник?')
    case 'синий' | 'голубой':
        print('Ха, классика!')
    case _:
        print('Тебя не понять')

# Данный код аналогичен прошлому варианту с elif. Добавлена возможность проверить
# несколько цветов. Например для красного и оранжевого будет один вывод.
# Вертикальная черта играет роль оператора "или". Уточню что пользователь вводит
# один единственный цвет.
# Вместо слова else в данной конструкции используется сочетание case _ На этом курсе
# мы ещё несколько раз будет встречаться с подчеркиванием. И каждый раз он имеет
# разные эффект в зависимости от применения.
